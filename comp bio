def PatternCount(Text, Pattern):
    count = 0
    for i in range(len(Text)-len(Pattern)+1):
        if Text[i:i+len(Pattern)] == Pattern:
            count = count+1
    return count
def FrequencyMap(Text, k):
    # your code here
    freq = {}
    for i in range(len(Text)-k+1):
        pattern = Text[i:i+k]
        if pattern not in freq.keys():
            freq[pattern] = 1
        else:
            freq[pattern] += 1
    return freq
def FrequentWords(Text, k):
    # your code here
    words = []
    freq = FrequencyMap(Text, k)
    m = max(freq.values())
    for key in freq:
        if freq[key] == m : words.append(key)
    return words
def Reverse(Pattern):
    # your code here
    return Pattern[::-1]
def Complement(Pattern):
    # your code here
    basepairs = {"A":"T", "G":"C", "T":"A", "C":"G"}
    complement = ""
    for base in Pattern:
        complement += basepairs.get(base)
    return complement
def ReverseComplement(Pattern):   
    return Reverse(Complement(Pattern))
def PatternMatching(Pattern, Genome):
    positions = [] # output variable
    for i in range(len(Genome)-len(Pattern)+1):
        if Pattern==Genome[i:i+len(Pattern)] : positions.append(i)
    return positions
def SymbolArray(Genome, symbol):
    # type your code here
    array = {}
    n = len(Genome)
    ExtendedGenome = Genome + Genome[0:n//2]
    for i in range(n):
        array[i] = PatternCount(symbol, ExtendedGenome[i:i+(n//2)])
    return array
def FasterSymbolArray(Genome, symbol):
    array = {}
    
    n = len(Genome)
    ExtendedGenome = Genome+Genome[0:n//2]
    array[0]=PatternCount(symbol,Genome[0:n//2])
    for i in range(1,n):
        array[i]=array[i-1]
        if ExtendedGenome[i-1]==symbol:
            array[i]-=1
        if ExtendedGenome[i+n//2-1]==symbol:
            array[i]+=1
    return array
def SkewArray(Genome):
    
    n=len(Genome)
    arr=[0]
    for i in range(1,n+1):
        if Genome[i-1] == 'A' or Genome[i-1] == 'T': arr.append(arr[i-1])
        if Genome[i-1] == 'G' : arr.append(arr[i-1]+1)
        if Genome[i-1] == 'C' : arr.append(arr[i-1]-1)
    return arr
def ApproximatePatternMatching(Text, Pattern, d):
    
    positions = [] # output variable
    for i in range(len(Genome)-len(Pattern)+1):
        if HammingDistance(Pattern,Genome[i:i+len(Pattern)])<=d : positions.append(i)
            
    return positions


# Insert your Hamming distance function on the following line.
def HammingDistance(p, q):
    # your code here
    count = 0
    for i in range(len(p)):
        if p[i] != q[i] : count += 1
    return count     
def ApproximatePatternCount(Pattern, Text, d):
    count = 0 # initialize count variable
    positions = [] # output variable
    for i in range(len(Text)-len(Pattern)+1):
        if HammingDistance(Pattern,Text[i:i+len(Pattern)])<=d : count+=1
            
    return count
